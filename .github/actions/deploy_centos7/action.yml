name: Deploy on CentOS
runs:
  using: composite
  steps:
  - name: Prepare container
    shell: bash
    run: |
      yum -y update
      yum -y install centos-release-scl-rh epel-release
      yum -y install git boost-devel gcc-c++ rpm-build file which wget unzip tar bzip2 gzip xz patch autoconf-archive automake make libtool jq
      yum -y remove git
      yum -y remove git-*
      yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
      yum -y install git
      /usr/bin/git --version
  - name: Checkout code
    uses: actions/checkout@main

  - name: Get release version
    shell: bash
    run: |
      pwd
      ls -la
      export GIT_DISCOVERY_ACROSS_FILESYSTEM=true
      ls -la ../
      #/usr/bin/git init
      /usr/bin/git config --global --add safe.directory /__w/rquery/rquery
      /usr/bin/git checkout main
      /usr/bin/git pull
      /usr/bin/git pull --tags
      echo "All tags"
      /usr/bin/git for-each-ref --sort=creatordate --format "%(refname) %(creatordate)" refs/tags
      #/usr/bin/git tag --sort=creatordate
      #/usr/bin/git describe --tags --abbrev=0
      echo "latest tag"
      reftag=$(/usr/bin/git for-each-ref --sort=creatordate --format "%(refname)" refs/tags|tail -1)
      echo ${reftag#*tags/}
      echo "RELEASE_VERSION=${reftag#*tags/}" >> $GITHUB_ENV

  - name: build RPM package
    id: rpm_build
    shell: bash # git must be present before checkout
    run: |
      /usr/bin/mkdir -pv /github/home/rpmbuild/{BUILD,RPMS,SRPMS,SOURCES,SPECS,BUILDROOT}
      /usr/bin/cp rquery.spec /github/home/rpmbuild/SPECS/rquery.spec
      #ls -ld /github/home/rpmbuild/SOURCES/
      /usr/bin/git archive --output=/github/home/rpmbuild/SOURCES/rquery-${{ env.RELEASE_VERSION }}.tar.gz --prefix=rquery-${{ env.RELEASE_VERSION }}/ HEAD
      /usr/bin/rpmbuild -ba --define "latestversion ${{ env.RELEASE_VERSION }}" /github/home/rpmbuild/SPECS/rquery.spec
      echo "::set-output name=source_rpm_path::/github/home/rpmbuild/RPMS/x86_64/rquery-${{ env.RELEASE_VERSION }}-1.el7.x86_64.rpm"
      echo "::set-output name=source_rpm_name::rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.rpm"
      echo "::set-output name=rpm_content_type::application/octet-stream"
      make
      zip rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.zip rq
      echo "::set-output name=source_zip_path::$(pwd)/rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.zip"
      echo "::set-output name=source_zip_name::rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.zip"
      echo "::set-output name=zip_content_type::application/zip"
      upload_url=$(curl -sL https://api.github.com/repos/actions/checkout/releases/latest | jq -r '.upload_url')
      echo $upload_url
      echo UPLOAD_URL=$upload_url >> $GITHUB_ENV

  - name: Upload artifact
    id: upload-release-asset 
    uses: actions/upload-release-asset@v1
    env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
    with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ${{ steps.rpm_build.outputs.source_rpm_path }}
        asset_name: ${{ steps.rpm_build.outputs.source_rpm_name }}
        asset_content_type: ${{ steps.rpm_build.outputs.rpm_content_type }}

  - name: Upload zip
    id: upload-zip-asset 
    uses: actions/upload-release-asset@v1
    env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
    with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ${{ steps.rpm_build.outputs.source_zip_path }}
        asset_name: ${{ steps.rpm_build.outputs.source_zip_name }}
        asset_content_type: ${{ steps.rpm_build.outputs.zip_content_type }}
