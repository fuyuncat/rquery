on: 
    push:
        branches: [ main ]
        # Sequence of patterns matched against refs/tags
        tags:
          - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  
name: Create RPM Release

jobs:
  build:
    name: Create RPM Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.rpm_build.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Check Release Version
      run: |
        #echo ${GITHUB_REF}
        #echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        /usr/bin/git checkout main
        /usr/bin/git pull
        /usr/bin/git pull --tags
        echo "All tags"
        /usr/bin/git for-each-ref --sort=creatordate --format "%(refname) %(creatordate)" refs/tags
        #/usr/bin/git tag --sort=creatordate
        #/usr/bin/git describe --tags --abbrev=0
        echo "latest tag"
        reftag=$(/usr/bin/git for-each-ref --sort=creatordate --format "%(refname)" refs/tags|tail -1)
        echo ${reftag#*tags/}
        echo "RELEASE_VERSION=${reftag#*tags/}" >> $GITHUB_ENV

    #- name: Delete Release
    #  id: delete_release
    #  uses: dev-drprasad/delete-tag-and-release@v0.2.0
    #  with:
    #    delete_release: true # default: false
    #    tag_name: ${{ env.RELEASE_VERSION }}
    #    #tag_name: latest
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #- name: Delete Tag
    #  shell: bash
    #  run: |
    #    /usr/bin/git tag -d ${{ env.RELEASE_VERSION }}
    #    /usr/bin/git push --tags
    #    /usr/bin/git push --delete origin refs/tags/${{ env.RELEASE_VERSION }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: |
            Changes in this Release
            - Create RPM
            - Upload RPM
          draft: false
          prerelease: false

    - name: build RPM package
      id: rpm_build
      shell: bash # git must be present before checkout
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc g++ make libicu-dev libboost-all-dev git libmpc-dev nasm gcc-multilib
        whereis boost
        ldd /usr/lib/x86_64-linux-gnu/libboost_regex.so
        ldconfig -p|grep libboost_regex
        #while read i; do
        #  ls $i
        #  dpkg --search $i
        #done <<< $(ldd /usr/lib/x86_64-linux-gnu/libboost_regex.so|grep "=>"|grep "/lib"|awk '{print $3}')
        cuuver=$(ldd /usr/lib/x86_64-linux-gnu/libboost_regex.so|grep libicuuc|awk '{print $3}'|awk -F '.' '{print $3}')
        sudo apt-get -y install libicu${cuuver}
        which g++
        ls /usr/include/boost/regex
        g++ --version
        echo "/usr/bin" >> $GITHUB_PATH
        ls
        pwd
        osver="ubuntu"$(cat /etc/lsb-release|grep DISTRIB_RELEASE|awk -F '=' '{print $2}')
        /usr/bin/mkdir -pv ~/rpmbuild/{BUILD,RPMS,SRPMS,SOURCES,SPECS,BUILDROOT}
        /usr/bin/cp rquery.spec /home/runner/rpmbuild/SPECS/rquery.spec
        /usr/bin/git archive --output=/home/runner/rpmbuild/SOURCES/rquery-${{ env.RELEASE_VERSION }}.tar.gz --prefix=rquery-${{ env.RELEASE_VERSION }}/ HEAD
        /usr/bin/rpmbuild -ba --define "latestversion ${{ env.RELEASE_VERSION }}" /home/runner/rpmbuild/SPECS/rquery.spec
        echo "::set-output name=source_rpm_path::/home/runner/rpmbuild/RPMS/x86_64/rquery-${{ env.RELEASE_VERSION }}-1.x86_64.rpm"
        echo "::set-output name=source_rpm_name::rquery-${{ env.RELEASE_VERSION }}.${osver}.x86_64.rpm"
        echo "::set-output name=rpm_content_type::application/octet-stream"
        make
        zip rquery-${{ env.RELEASE_VERSION }}.${osver}.x86_64.zip rq
        echo "::set-output name=source_zip_path::$(pwd)/rquery-${{ env.RELEASE_VERSION }}.${osver}.x86_64.zip"
        echo "::set-output name=source_zip_name::rquery-${{ env.RELEASE_VERSION }}.${osver}.x86_64.zip"
        echo "::set-output name=zip_content_type::application/zip"
        echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

    - name: Upload artifact
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.rpm_build.outputs.source_rpm_path }}
          asset_name: ${{ steps.rpm_build.outputs.source_rpm_name }}
          asset_content_type: ${{ steps.rpm_build.outputs.rpm_content_type }}

    - name: Upload zip
      id: upload-zip-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.rpm_build.outputs.source_zip_path }}
          asset_name: ${{ steps.rpm_build.outputs.source_zip_name }}
          asset_content_type: ${{ steps.rpm_build.outputs.zip_content_type }}

  CentOS7:
    needs: build
    runs-on: ubuntu-latest
    container: centos:7
    steps:
      - run: |
          echo "upload_url - " ${{ needs.build.outputs.upload_url }}
      - uses: fuyuncat/rquery/.github/actions/deploy_centos7@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.upload_url }}

  CentOS8:
    needs: build
    runs-on: ubuntu-latest
    container: centos:8
    steps:
      - run: |
          echo "upload_url - " ${{ needs.build.outputs.upload_url }}
      - uses: fuyuncat/rquery/.github/actions/deploy_centos8@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.upload_url }}

  MacOS:
    needs: build
    runs-on: macos-13
    #runs-on: macos-latest
    steps:
      - uses: fuyuncat/rquery/.github/actions/deploy_macos@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.upload_url }}
