
on: 
    push:
        branches: [ main ]
        # Sequence of patterns matched against refs/tags
        tags:
          - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  
name: Test Container

jobs:
  build:
    name: Create RPM Release
    runs-on: ubuntu-latest
    container: centos:7

    steps:
    - name: Prepare container
      run: |
        yum -y update
        yum -y install centos-release-scl-rh epel-release
        yum -y install git boost-devel gcc-c++ rpm-build file which wget unzip tar bzip2 gzip xz patch autoconf-archive automake make libtool
        yum -y remove git
        yum -y remove git-*
        yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
        yum -y install git
        /usr/bin/git --version

    - name: Checkout code
      uses: actions/checkout@main

    - name: Get release version
      run: |
        pwd
        ls -la
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=true
        ls -la ../
        #/usr/bin/git init
        /usr/bin/git config --global --add safe.directory /__w/rquery/rquery
        /usr/bin/git checkout main
        /usr/bin/git pull
        /usr/bin/git pull --tags
        echo "All tags"
        /usr/bin/git for-each-ref --sort=creatordate --format "%(refname) %(creatordate)" refs/tags
        #/usr/bin/git tag --sort=creatordate
        #/usr/bin/git describe --tags --abbrev=0
        echo "latest tag"
        reftag=$(/usr/bin/git for-each-ref --sort=creatordate --format "%(refname)" refs/tags|tail -1)
        echo ${reftag#*tags/}
        echo "RELEASE_VERSION=${reftag#*tags/}" >> $GITHUB_ENV

    - name: build RPM package
      id: rpm_build
      shell: bash # git must be present before checkout
      run: |
        /usr/bin/mkdir -pv ~/rpmbuild/{BUILD,RPMS,SRPMS,SOURCES,SPECS,BUILDROOT}
        /usr/bin/cp rquery.spec ~/rpmbuild/SPECS/rquery.spec
        ls -ld ~/rpmbuild/SOURCES/
        /usr/bin/git archive --output=~/rpmbuild/SOURCES/rquery-${{ env.RELEASE_VERSION }}.tar.gz --prefix=rquery-${{ env.RELEASE_VERSION }}/ HEAD
        /usr/bin/rpmbuild -ba --define "latestversion ${{ env.RELEASE_VERSION }}" ~/rpmbuild/SPECS/rquery.spec
        echo "::set-output name=source_rpm_path::~/rpmbuild/RPMS/x86_64/rquery-${{ env.RELEASE_VERSION }}-1.x86_64.rpm"
        echo "::set-output name=source_rpm_name::rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.rpm"
        echo "::set-output name=rpm_content_type::application/octet-stream"
        make
        zip rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.zip rq
        echo "::set-output name=source_zip_path::$(pwd)/rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.zip"
        echo "::set-output name=source_zip_name::rquery-${{ env.RELEASE_VERSION }}.el7.x86_64.zip"
        echo "::set-output name=zip_content_type::application/zip"

    - name: Upload artifact
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.rpm_build.outputs.source_rpm_path }}
          asset_name: ${{ steps.rpm_build.outputs.source_rpm_name }}
          asset_content_type: ${{ steps.rpm_build.outputs.rpm_content_type }}

    - name: Upload zip
      id: upload-zip-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.rpm_build.outputs.source_zip_path }}
          asset_name: ${{ steps.rpm_build.outputs.source_zip_name }}
          asset_content_type: ${{ steps.rpm_build.outputs.zip_content_type }}
